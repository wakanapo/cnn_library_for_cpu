// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "genom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Gene {
class GeneDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Gene>
     _instance;
} _Gene_default_instance_;
class GenomsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Genoms>
     _instance;
} _Genoms_default_instance_;

namespace protobuf_genom_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gene, gene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gene, evaluation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genoms, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Genoms, genoms_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Gene)},
  { 7, -1, sizeof(Genoms)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Genoms_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "genom.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Gene_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Gene_default_instance_);_Genoms_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Genoms_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013genom.proto\022\004Gene\",\n\004Gene\022\020\n\004gene\030\001 \003("
      "\002B\002\020\001\022\022\n\nevaluation\030\002 \001(\002\"$\n\006Genoms\022\032\n\006g"
      "enoms\030\001 \003(\0132\n.Gene.Geneb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 111);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "genom.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_genom_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gene::kGeneFieldNumber;
const int Gene::kEvaluationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gene::Gene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gene.Gene)
}
Gene::Gene(const Gene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gene_(from.gene_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  evaluation_ = from.evaluation_;
  // @@protoc_insertion_point(copy_constructor:Gene.Gene)
}

void Gene::SharedCtor() {
  evaluation_ = 0;
  _cached_size_ = 0;
}

Gene::~Gene() {
  // @@protoc_insertion_point(destructor:Gene.Gene)
  SharedDtor();
}

void Gene::SharedDtor() {
}

void Gene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gene::descriptor() {
  protobuf_genom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gene& Gene::default_instance() {
  protobuf_genom_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gene* Gene::New(::google::protobuf::Arena* arena) const {
  Gene* n = new Gene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gene::Clear() {
// @@protoc_insertion_point(message_clear_start:Gene.Gene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gene_.Clear();
  evaluation_ = 0;
  _internal_metadata_.Clear();
}

bool Gene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gene.Gene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float gene = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_gene())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_gene())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float evaluation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &evaluation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gene.Gene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gene.Gene)
  return false;
#undef DO_
}

void Gene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gene.Gene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float gene = 1 [packed = true];
  if (this->gene_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _gene_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->gene().data(), this->gene_size(), output);
  }

  // float evaluation = 2;
  if (this->evaluation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->evaluation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gene.Gene)
}

::google::protobuf::uint8* Gene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gene.Gene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float gene = 1 [packed = true];
  if (this->gene_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _gene_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->gene_, target);
  }

  // float evaluation = 2;
  if (this->evaluation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->evaluation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gene.Gene)
  return target;
}

size_t Gene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gene.Gene)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float gene = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->gene_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gene_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // float evaluation = 2;
  if (this->evaluation() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gene.Gene)
  GOOGLE_DCHECK_NE(&from, this);
  const Gene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gene.Gene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gene.Gene)
    MergeFrom(*source);
  }
}

void Gene::MergeFrom(const Gene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gene.Gene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gene_.MergeFrom(from.gene_);
  if (from.evaluation() != 0) {
    set_evaluation(from.evaluation());
  }
}

void Gene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gene.Gene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gene::CopyFrom(const Gene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gene.Gene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gene::IsInitialized() const {
  return true;
}

void Gene::Swap(Gene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gene::InternalSwap(Gene* other) {
  using std::swap;
  gene_.InternalSwap(&other->gene_);
  swap(evaluation_, other->evaluation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gene::GetMetadata() const {
  protobuf_genom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gene

// repeated float gene = 1 [packed = true];
int Gene::gene_size() const {
  return gene_.size();
}
void Gene::clear_gene() {
  gene_.Clear();
}
float Gene::gene(int index) const {
  // @@protoc_insertion_point(field_get:Gene.Gene.gene)
  return gene_.Get(index);
}
void Gene::set_gene(int index, float value) {
  gene_.Set(index, value);
  // @@protoc_insertion_point(field_set:Gene.Gene.gene)
}
void Gene::add_gene(float value) {
  gene_.Add(value);
  // @@protoc_insertion_point(field_add:Gene.Gene.gene)
}
const ::google::protobuf::RepeatedField< float >&
Gene::gene() const {
  // @@protoc_insertion_point(field_list:Gene.Gene.gene)
  return gene_;
}
::google::protobuf::RepeatedField< float >*
Gene::mutable_gene() {
  // @@protoc_insertion_point(field_mutable_list:Gene.Gene.gene)
  return &gene_;
}

// float evaluation = 2;
void Gene::clear_evaluation() {
  evaluation_ = 0;
}
float Gene::evaluation() const {
  // @@protoc_insertion_point(field_get:Gene.Gene.evaluation)
  return evaluation_;
}
void Gene::set_evaluation(float value) {
  
  evaluation_ = value;
  // @@protoc_insertion_point(field_set:Gene.Gene.evaluation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Genoms::kGenomsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Genoms::Genoms()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_genom_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Gene.Genoms)
}
Genoms::Genoms(const Genoms& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      genoms_(from.genoms_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Gene.Genoms)
}

void Genoms::SharedCtor() {
  _cached_size_ = 0;
}

Genoms::~Genoms() {
  // @@protoc_insertion_point(destructor:Gene.Genoms)
  SharedDtor();
}

void Genoms::SharedDtor() {
}

void Genoms::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Genoms::descriptor() {
  protobuf_genom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genom_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Genoms& Genoms::default_instance() {
  protobuf_genom_2eproto::InitDefaults();
  return *internal_default_instance();
}

Genoms* Genoms::New(::google::protobuf::Arena* arena) const {
  Genoms* n = new Genoms;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Genoms::Clear() {
// @@protoc_insertion_point(message_clear_start:Gene.Genoms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  genoms_.Clear();
  _internal_metadata_.Clear();
}

bool Genoms::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Gene.Genoms)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Gene.Gene genoms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_genoms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Gene.Genoms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Gene.Genoms)
  return false;
#undef DO_
}

void Genoms::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Gene.Genoms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gene.Gene genoms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->genoms_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->genoms(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Gene.Genoms)
}

::google::protobuf::uint8* Genoms::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Gene.Genoms)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Gene.Gene genoms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->genoms_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->genoms(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Gene.Genoms)
  return target;
}

size_t Genoms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Gene.Genoms)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Gene.Gene genoms = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->genoms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->genoms(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Genoms::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Gene.Genoms)
  GOOGLE_DCHECK_NE(&from, this);
  const Genoms* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Genoms>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Gene.Genoms)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Gene.Genoms)
    MergeFrom(*source);
  }
}

void Genoms::MergeFrom(const Genoms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Gene.Genoms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  genoms_.MergeFrom(from.genoms_);
}

void Genoms::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Gene.Genoms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Genoms::CopyFrom(const Genoms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Gene.Genoms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Genoms::IsInitialized() const {
  return true;
}

void Genoms::Swap(Genoms* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Genoms::InternalSwap(Genoms* other) {
  using std::swap;
  genoms_.InternalSwap(&other->genoms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Genoms::GetMetadata() const {
  protobuf_genom_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_genom_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Genoms

// repeated .Gene.Gene genoms = 1;
int Genoms::genoms_size() const {
  return genoms_.size();
}
void Genoms::clear_genoms() {
  genoms_.Clear();
}
const ::Gene::Gene& Genoms::genoms(int index) const {
  // @@protoc_insertion_point(field_get:Gene.Genoms.genoms)
  return genoms_.Get(index);
}
::Gene::Gene* Genoms::mutable_genoms(int index) {
  // @@protoc_insertion_point(field_mutable:Gene.Genoms.genoms)
  return genoms_.Mutable(index);
}
::Gene::Gene* Genoms::add_genoms() {
  // @@protoc_insertion_point(field_add:Gene.Genoms.genoms)
  return genoms_.Add();
}
::google::protobuf::RepeatedPtrField< ::Gene::Gene >*
Genoms::mutable_genoms() {
  // @@protoc_insertion_point(field_mutable_list:Gene.Genoms.genoms)
  return &genoms_;
}
const ::google::protobuf::RepeatedPtrField< ::Gene::Gene >&
Genoms::genoms() const {
  // @@protoc_insertion_point(field_list:Gene.Genoms.genoms)
  return genoms_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Gene

// @@protoc_insertion_point(global_scope)
