// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arithmatic.proto

#ifndef PROTOBUF_INCLUDED_arithmatic_2eproto
#define PROTOBUF_INCLUDED_arithmatic_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_arithmatic_2eproto 

namespace protobuf_arithmatic_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_arithmatic_2eproto
namespace Arithmatic {
class Calculation;
class CalculationDefaultTypeInternal;
extern CalculationDefaultTypeInternal _Calculation_default_instance_;
class One;
class OneDefaultTypeInternal;
extern OneDefaultTypeInternal _One_default_instance_;
}  // namespace Arithmatic
namespace google {
namespace protobuf {
template<> ::Arithmatic::Calculation* Arena::CreateMaybeMessage<::Arithmatic::Calculation>(Arena*);
template<> ::Arithmatic::One* Arena::CreateMaybeMessage<::Arithmatic::One>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Arithmatic {

// ===================================================================

class Calculation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Arithmatic.Calculation) */ {
 public:
  Calculation();
  virtual ~Calculation();

  Calculation(const Calculation& from);

  inline Calculation& operator=(const Calculation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Calculation(Calculation&& from) noexcept
    : Calculation() {
    *this = ::std::move(from);
  }

  inline Calculation& operator=(Calculation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Calculation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Calculation* internal_default_instance() {
    return reinterpret_cast<const Calculation*>(
               &_Calculation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Calculation* other);
  friend void swap(Calculation& a, Calculation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Calculation* New() const final {
    return CreateMaybeMessage<Calculation>(NULL);
  }

  Calculation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Calculation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Calculation& from);
  void MergeFrom(const Calculation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Calculation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file = 1;
  void clear_file();
  static const int kFileFieldNumber = 1;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // string operator = 3;
  void clear_operator_();
  static const int kOperatorFieldNumber = 3;
  const ::std::string& operator_() const;
  void set_operator_(const ::std::string& value);
  #if LANG_CXX11
  void set_operator_(::std::string&& value);
  #endif
  void set_operator_(const char* value);
  void set_operator_(const char* value, size_t size);
  ::std::string* mutable_operator_();
  ::std::string* release_operator_();
  void set_allocated_operator_(::std::string* operator_);

  // int32 line = 2;
  void clear_line();
  static const int kLineFieldNumber = 2;
  ::google::protobuf::int32 line() const;
  void set_line(::google::protobuf::int32 value);

  // float a = 4;
  void clear_a();
  static const int kAFieldNumber = 4;
  float a() const;
  void set_a(float value);

  // float b = 5;
  void clear_b();
  static const int kBFieldNumber = 5;
  float b() const;
  void set_b(float value);

  // float ans = 6;
  void clear_ans();
  static const int kAnsFieldNumber = 6;
  float ans() const;
  void set_ans(float value);

  // @@protoc_insertion_point(class_scope:Arithmatic.Calculation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr operator__;
  ::google::protobuf::int32 line_;
  float a_;
  float b_;
  float ans_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_arithmatic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class One : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Arithmatic.One) */ {
 public:
  One();
  virtual ~One();

  One(const One& from);

  inline One& operator=(const One& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  One(One&& from) noexcept
    : One() {
    *this = ::std::move(from);
  }

  inline One& operator=(One&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const One& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const One* internal_default_instance() {
    return reinterpret_cast<const One*>(
               &_One_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(One* other);
  friend void swap(One& a, One& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline One* New() const final {
    return CreateMaybeMessage<One>(NULL);
  }

  One* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<One>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const One& from);
  void MergeFrom(const One& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(One* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Arithmatic.Calculation calc = 1;
  int calc_size() const;
  void clear_calc();
  static const int kCalcFieldNumber = 1;
  ::Arithmatic::Calculation* mutable_calc(int index);
  ::google::protobuf::RepeatedPtrField< ::Arithmatic::Calculation >*
      mutable_calc();
  const ::Arithmatic::Calculation& calc(int index) const;
  ::Arithmatic::Calculation* add_calc();
  const ::google::protobuf::RepeatedPtrField< ::Arithmatic::Calculation >&
      calc() const;

  // @@protoc_insertion_point(class_scope:Arithmatic.One)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Arithmatic::Calculation > calc_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_arithmatic_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Calculation

// string file = 1;
inline void Calculation::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Calculation::file() const {
  // @@protoc_insertion_point(field_get:Arithmatic.Calculation.file)
  return file_.GetNoArena();
}
inline void Calculation::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Arithmatic.Calculation.file)
}
#if LANG_CXX11
inline void Calculation::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Arithmatic.Calculation.file)
}
#endif
inline void Calculation::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Arithmatic.Calculation.file)
}
inline void Calculation::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Arithmatic.Calculation.file)
}
inline ::std::string* Calculation::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:Arithmatic.Calculation.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calculation::release_file() {
  // @@protoc_insertion_point(field_release:Arithmatic.Calculation.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calculation::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:Arithmatic.Calculation.file)
}

// int32 line = 2;
inline void Calculation::clear_line() {
  line_ = 0;
}
inline ::google::protobuf::int32 Calculation::line() const {
  // @@protoc_insertion_point(field_get:Arithmatic.Calculation.line)
  return line_;
}
inline void Calculation::set_line(::google::protobuf::int32 value) {
  
  line_ = value;
  // @@protoc_insertion_point(field_set:Arithmatic.Calculation.line)
}

// string operator = 3;
inline void Calculation::clear_operator_() {
  operator__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Calculation::operator_() const {
  // @@protoc_insertion_point(field_get:Arithmatic.Calculation.operator)
  return operator__.GetNoArena();
}
inline void Calculation::set_operator_(const ::std::string& value) {
  
  operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Arithmatic.Calculation.operator)
}
#if LANG_CXX11
inline void Calculation::set_operator_(::std::string&& value) {
  
  operator__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Arithmatic.Calculation.operator)
}
#endif
inline void Calculation::set_operator_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Arithmatic.Calculation.operator)
}
inline void Calculation::set_operator_(const char* value, size_t size) {
  
  operator__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Arithmatic.Calculation.operator)
}
inline ::std::string* Calculation::mutable_operator_() {
  
  // @@protoc_insertion_point(field_mutable:Arithmatic.Calculation.operator)
  return operator__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Calculation::release_operator_() {
  // @@protoc_insertion_point(field_release:Arithmatic.Calculation.operator)
  
  return operator__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Calculation::set_allocated_operator_(::std::string* operator_) {
  if (operator_ != NULL) {
    
  } else {
    
  }
  operator__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operator_);
  // @@protoc_insertion_point(field_set_allocated:Arithmatic.Calculation.operator)
}

// float a = 4;
inline void Calculation::clear_a() {
  a_ = 0;
}
inline float Calculation::a() const {
  // @@protoc_insertion_point(field_get:Arithmatic.Calculation.a)
  return a_;
}
inline void Calculation::set_a(float value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:Arithmatic.Calculation.a)
}

// float b = 5;
inline void Calculation::clear_b() {
  b_ = 0;
}
inline float Calculation::b() const {
  // @@protoc_insertion_point(field_get:Arithmatic.Calculation.b)
  return b_;
}
inline void Calculation::set_b(float value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:Arithmatic.Calculation.b)
}

// float ans = 6;
inline void Calculation::clear_ans() {
  ans_ = 0;
}
inline float Calculation::ans() const {
  // @@protoc_insertion_point(field_get:Arithmatic.Calculation.ans)
  return ans_;
}
inline void Calculation::set_ans(float value) {
  
  ans_ = value;
  // @@protoc_insertion_point(field_set:Arithmatic.Calculation.ans)
}

// -------------------------------------------------------------------

// One

// repeated .Arithmatic.Calculation calc = 1;
inline int One::calc_size() const {
  return calc_.size();
}
inline void One::clear_calc() {
  calc_.Clear();
}
inline ::Arithmatic::Calculation* One::mutable_calc(int index) {
  // @@protoc_insertion_point(field_mutable:Arithmatic.One.calc)
  return calc_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Arithmatic::Calculation >*
One::mutable_calc() {
  // @@protoc_insertion_point(field_mutable_list:Arithmatic.One.calc)
  return &calc_;
}
inline const ::Arithmatic::Calculation& One::calc(int index) const {
  // @@protoc_insertion_point(field_get:Arithmatic.One.calc)
  return calc_.Get(index);
}
inline ::Arithmatic::Calculation* One::add_calc() {
  // @@protoc_insertion_point(field_add:Arithmatic.One.calc)
  return calc_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Arithmatic::Calculation >&
One::calc() const {
  // @@protoc_insertion_point(field_list:Arithmatic.One.calc)
  return calc_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Arithmatic

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_arithmatic_2eproto
