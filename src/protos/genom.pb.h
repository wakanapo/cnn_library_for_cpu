// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genom.proto

#ifndef PROTOBUF_genom_2eproto__INCLUDED
#define PROTOBUF_genom_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Gene {
class Gene;
class GeneDefaultTypeInternal;
extern GeneDefaultTypeInternal _Gene_default_instance_;
class Genoms;
class GenomsDefaultTypeInternal;
extern GenomsDefaultTypeInternal _Genoms_default_instance_;
}  // namespace Gene

namespace Gene {

namespace protobuf_genom_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_genom_2eproto

// ===================================================================

class Gene : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Gene.Gene) */ {
 public:
  Gene();
  virtual ~Gene();

  Gene(const Gene& from);

  inline Gene& operator=(const Gene& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gene(Gene&& from) noexcept
    : Gene() {
    *this = ::std::move(from);
  }

  inline Gene& operator=(Gene&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Gene& default_instance();

  static inline const Gene* internal_default_instance() {
    return reinterpret_cast<const Gene*>(
               &_Gene_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Gene* other);
  friend void swap(Gene& a, Gene& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gene* New() const PROTOBUF_FINAL { return New(NULL); }

  Gene* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gene& from);
  void MergeFrom(const Gene& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gene* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float gene = 1 [packed = true];
  int gene_size() const;
  void clear_gene();
  static const int kGeneFieldNumber = 1;
  float gene(int index) const;
  void set_gene(int index, float value);
  void add_gene(float value);
  const ::google::protobuf::RepeatedField< float >&
      gene() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_gene();

  // float evaluation = 2;
  void clear_evaluation();
  static const int kEvaluationFieldNumber = 2;
  float evaluation() const;
  void set_evaluation(float value);

  // @@protoc_insertion_point(class_scope:Gene.Gene)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > gene_;
  mutable int _gene_cached_byte_size_;
  float evaluation_;
  mutable int _cached_size_;
  friend struct protobuf_genom_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Genoms : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Gene.Genoms) */ {
 public:
  Genoms();
  virtual ~Genoms();

  Genoms(const Genoms& from);

  inline Genoms& operator=(const Genoms& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Genoms(Genoms&& from) noexcept
    : Genoms() {
    *this = ::std::move(from);
  }

  inline Genoms& operator=(Genoms&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Genoms& default_instance();

  static inline const Genoms* internal_default_instance() {
    return reinterpret_cast<const Genoms*>(
               &_Genoms_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Genoms* other);
  friend void swap(Genoms& a, Genoms& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Genoms* New() const PROTOBUF_FINAL { return New(NULL); }

  Genoms* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Genoms& from);
  void MergeFrom(const Genoms& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Genoms* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Gene.Gene genoms = 1;
  int genoms_size() const;
  void clear_genoms();
  static const int kGenomsFieldNumber = 1;
  const ::Gene::Gene& genoms(int index) const;
  ::Gene::Gene* mutable_genoms(int index);
  ::Gene::Gene* add_genoms();
  ::google::protobuf::RepeatedPtrField< ::Gene::Gene >*
      mutable_genoms();
  const ::google::protobuf::RepeatedPtrField< ::Gene::Gene >&
      genoms() const;

  // @@protoc_insertion_point(class_scope:Gene.Genoms)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Gene::Gene > genoms_;
  mutable int _cached_size_;
  friend struct protobuf_genom_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Gene

// repeated float gene = 1 [packed = true];
inline int Gene::gene_size() const {
  return gene_.size();
}
inline void Gene::clear_gene() {
  gene_.Clear();
}
inline float Gene::gene(int index) const {
  // @@protoc_insertion_point(field_get:Gene.Gene.gene)
  return gene_.Get(index);
}
inline void Gene::set_gene(int index, float value) {
  gene_.Set(index, value);
  // @@protoc_insertion_point(field_set:Gene.Gene.gene)
}
inline void Gene::add_gene(float value) {
  gene_.Add(value);
  // @@protoc_insertion_point(field_add:Gene.Gene.gene)
}
inline const ::google::protobuf::RepeatedField< float >&
Gene::gene() const {
  // @@protoc_insertion_point(field_list:Gene.Gene.gene)
  return gene_;
}
inline ::google::protobuf::RepeatedField< float >*
Gene::mutable_gene() {
  // @@protoc_insertion_point(field_mutable_list:Gene.Gene.gene)
  return &gene_;
}

// float evaluation = 2;
inline void Gene::clear_evaluation() {
  evaluation_ = 0;
}
inline float Gene::evaluation() const {
  // @@protoc_insertion_point(field_get:Gene.Gene.evaluation)
  return evaluation_;
}
inline void Gene::set_evaluation(float value) {
  
  evaluation_ = value;
  // @@protoc_insertion_point(field_set:Gene.Gene.evaluation)
}

// -------------------------------------------------------------------

// Genoms

// repeated .Gene.Gene genoms = 1;
inline int Genoms::genoms_size() const {
  return genoms_.size();
}
inline void Genoms::clear_genoms() {
  genoms_.Clear();
}
inline const ::Gene::Gene& Genoms::genoms(int index) const {
  // @@protoc_insertion_point(field_get:Gene.Genoms.genoms)
  return genoms_.Get(index);
}
inline ::Gene::Gene* Genoms::mutable_genoms(int index) {
  // @@protoc_insertion_point(field_mutable:Gene.Genoms.genoms)
  return genoms_.Mutable(index);
}
inline ::Gene::Gene* Genoms::add_genoms() {
  // @@protoc_insertion_point(field_add:Gene.Genoms.genoms)
  return genoms_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Gene::Gene >*
Genoms::mutable_genoms() {
  // @@protoc_insertion_point(field_mutable_list:Gene.Genoms.genoms)
  return &genoms_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Gene::Gene >&
Genoms::genoms() const {
  // @@protoc_insertion_point(field_list:Gene.Genoms.genoms)
  return genoms_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Gene

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_genom_2eproto__INCLUDED
